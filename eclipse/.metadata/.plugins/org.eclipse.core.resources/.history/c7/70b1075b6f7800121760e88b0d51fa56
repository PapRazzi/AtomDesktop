package me.atom.windowsj;

import javax.sound.sampled.*;

import org.apache.commons.io.FileUtils;

import java.io.*;
import java.net.*;
import java.nio.MappedByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;

import javaFlacEncoder.FLAC_FileEncoder;

/**
 * A sample program is to demonstrate how to record sound in Java
 * author: www.codejava.net
 */
public class JavaSoundRecorder {
	static final long RECORD_TIME = 5000; //5seconds
	AudioFileFormat.Type fileType = AudioFileFormat.Type.WAVE;
	TargetDataLine line;

	/**
	 * sample rate -> 16000 !important
	 **/
	AudioFormat getAudioFormat() {
		float sampleRate = 16000;
		int sampleSizeInBits = 16;
		int channels = 2;
		boolean signed = true;
		boolean bigEndian = true;
		AudioFormat format = new AudioFormat(sampleRate, sampleSizeInBits,
											 channels, signed, bigEndian);
		return format;
	}

	/**
	 * Captures the sound and record into a WAV file
	 */
	void start(String id) {
		

		File wavFile = new File("C:/Program Files/Atom/UserData/" + id + ".wav");
		
		try {
			AudioFormat format = getAudioFormat();
			DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);

			// checks if system supports the data line
			if (!AudioSystem.isLineSupported(info)) {
				System.out.println("Line not supported");
				System.exit(0);
			}
			line = (TargetDataLine) AudioSystem.getLine(info);
			line.open(format);
			line.start();	// start capturing

			//System.out.println("Start capturing...");

			AudioInputStream ais = new AudioInputStream(line);

			//System.out.println("Start recording...");

			
			// start recording
			AudioSystem.write(ais, fileType, wavFile);

		} catch (LineUnavailableException ex) {
			ex.printStackTrace();
		} catch (IOException ioe) {
			ioe.printStackTrace();
		}
	}

	/**
	 * Closes the target data line to finish capturing and recording
	 * @throws IOException 
	 * @throws MalformedURLException 
	 */
	void finishAndProcess(String uuid) throws MalformedURLException, IOException {
		line.stop();
		line.close();
		
		FLAC_FileEncoder flacEncoder = new FLAC_FileEncoder();
		File inputFile = new File("C:/Program Files/Atom/UserData/" + uuid + ".wav");
		File outputFile = new File("C:/Program Files/Atom/UserData/" + uuid + ".flac");
		
		flacEncoder.encode(inputFile, outputFile);
		
		
		////////Upload the recorded and converted file, and indicates 
		FTPAtomUploader.doUpload(uuid);
		try {
			String url = "http://atom.alwaysdata.net/guzzoni/audio/shell.php";
			String charset = "iso-8859-1";
			String param1 = uuid;
			String query = String.format("id=%s", URLEncoder.encode(param1, charset));
			
			URLConnection connection = new URL(url + "?" + query).openConnection();
			connection.setRequestProperty("Accept-Charset", charset);
			connection.getInputStream();

		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		while (!hasRespondedTo(uuid)) {
			
		Thread bitch = new Thread(new Runnable () {
			public void run() {
				try {
					Thread.sleep(100);
				} catch (InterruptedException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}}});
		bitch.start();
		
		}
		
		File targetFile = new File("C:/Program Files/Atom/UserData/" + uuid + ".txt");
		URL idUrl = new URL("http://atom.alwaysdata.net/guzzoni/audio/" + uuid + ".txt");
		FileUtils.copyURLToFile(idUrl, targetFile);
		String s = readFile("C:/Program Files/Atom/UserData/" + uuid + ".txt");
		if (s.length() > 0) {
		int x = s.length();
		String result = s.substring(0,1).toUpperCase().concat(s.substring(1, x));
		DialogWindow.printRequest(result);
		} else {
			DialogWindow.voiceFailed(1);
		}
		
		try {
			String url = "http://atom.alwaysdata.net/guzzoni/audio/delete.php";
			String charset = "iso-8859-1";
			String param1 = uuid;
			String query = String.format("id=%s", URLEncoder.encode(param1, charset));
			
			URLConnection connection = new URL(url + "?" + query).openConnection();
			connection.setRequestProperty("Accept-Charset", charset);
			connection.getInputStream();

		} catch (UnsupportedEncodingException e) {
			e.printStackTrace();
		}
		
		
		//////Commande pour effacer tous les fichiers créés
		
		
	}
	
	private static String readFile(String path) throws IOException {
		
		FileInputStream stream = new FileInputStream(new File(path));
		try {
			FileChannel fc = stream.getChannel();
			MappedByteBuffer bb = fc.map(FileChannel.MapMode.READ_ONLY, 0, fc.size());
			return Charset.defaultCharset().decode(bb).toString();
		} finally {
			stream.close();
		}
	}
	
	public static boolean hasRespondedTo(String uuid) {
		try {
			String URL = new String("http://atom.alwaysdata.net/guzzoni/audio/" + uuid + ".txt");
			HttpURLConnection.setFollowRedirects(false);
			HttpURLConnection con = (HttpURLConnection) new URL(URL).openConnection();
			con.setRequestMethod("HEAD");
			return (con.getResponseCode() == HttpURLConnection.HTTP_OK);
		} catch (Exception e) {
			e.printStackTrace();
			return false;
		}
	}




}